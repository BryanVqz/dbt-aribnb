version: 2

models:
  - name: dim_listings_cleansed
    description: "Cleansed listing data model"
    columns:
      - name: listing_id
        description: "Unique identifier for the listing"
        tests:
          - unique
          - not_null

      - name: host_id
        description: Host ID. References to host.
        tests:
          - not_null
          - relationships:
              to: ref( 'dim_hosts_cleansed' ) ## performs a left join with this table.
              field: host_id

      - name: room_type
        tests:
          - accepted_values:
              values: [
                'Entire home/apt',
                'Private room',
                'Shared room',
                'Hotel room'
              ]
      
      - name: minimum_nights
        description: '{{ doc("dim_listings_cleansed__minimum_nights") }}'
        tests:
          - positive_values
  
  - name: dim_hosts_cleansed
    description: Cleansed hosts table based on raw src_hosts source
    columns:
      - name: host_id
        description: Host ID of the host.
        tests:
          - not_null
          - unique

      - name: host_name
        description: Field used to show name of host.
        tests:
          - not_null

      - name: is_superhost
        description: Defined if host is superhost or not.
        tests:
          - accepted_values:
              values: ['t', 'f']
      
  - name: dim_listings_with_host
    description: Join table from listings and host
    tests:
      - dbt_expectations.expect_table_row_count_to_equal_other_table:
          compare_model: source('airbnb', 'listings')
    columns:
      - name: price
        description: | 
          In this example, the test ensures that the 95th percentile of the price
          column in the transactions model lies between $50 and $500 considering 
          only positive transaction amounts.
        tests:
          - dbt_expectations.expect_column_quantile_values_to_be_between:
              quantile: 0.95
              min_value: 50
              max_value: 500
              row_condition: "price > 0"
          - dbt_expectations.expect_column_max_to_be_between:
              max_value: 5000
              config:
                severity: warn
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: NUMBER ## see snowflake definition